---
title: "loc vs iloc in Panda"
author: "Ha Truong"
date: "2023-10-20"
date-modified: "2023-10-24"
categories: [code]
execute:
  echo: true
code-line-numbers: true
code-overflow: wrap
jupyter: python3
format:
  html:
    toc: true
    toc-depth: 3
    
---


`loc` and `iloc` are often used to select a subset rows or cells in DataFrame Pandas. Here is the summary of how to use these functions.

## Using iloc
In general, `iloc` is used to filter dataframe based on **index** of row and column as below:
  ```
  df.iloc[<row_index>, <column_index>]
  ```
in which `<row_index>`, `<column_index>` can be one of three types: a single number, a list of numbers or a slice `x:y`. 

Noted that:

  - cannot select based on column name when using `iloc`.
  - can mix type of `row_index` and `column_index` (they do not need to be the same type)
  - when `row_index` or `column_index` is a single number, put it in square brackets in order to return a DataFrame; otherwise, it will return a Series

#### Example: 
For example, we have `df` dataframe as below:
```{python}
import pandas as pd
df = pd.DataFrame({'name': ['A', 'B', 'C', 'D', 'E', 'F'], 
                  'salary': [100, 77, 80, 95, 30, 45],
                  'title': ['Mr', None, 'Ms', 'Mrs', 'Mr', 'Mr'],
                  'addr': ['123 LTK', '83 PVB', '4 CX', '45/6 LDH', None, None]
                  })
df.head()
```
  - select a single row and return a Series

```{python}
#
df.iloc[1] # return a Series
```
  - select a single row and return a dataframe
```{python}
#
df.iloc[[1]] # return a df
# 
```
  - select a subset continuous row with all columns
```{python}
# 
df.iloc[1:3,]
```
  - select a subset continuous row with a subset columns
```{python}
#
df.iloc[1:3, 2:]
```
- select a subset continuous row with one column
```{python}
#
df.iloc[1:3, [2]]   # return df
```

```{python}
df.iloc[1:3, 2]     # return Series
```
- select a subset not continuous row
```{python}
# 
df.iloc[[0,2,3]] 
```
- select a subset not continuous row & not continuous columns
```{python}
# 
df.iloc[[0,2,3], [0, 2]] 
#
```


## Using loc
`loc` is used for selecting subset dataframe based on `value` of row and **value** of column. While **value** of column is one of three type column name: single, a list or a slice, `value` of row is filtered by 2 ways: (1) based on index value and (2) based on condition.

In the former, index value can be a single or a list of value. In the later, condition is comparison/logical checking of one or more columns. Let see the example:


### (1) Select based on index value

```{python}
df.loc[[1]] # return the row at index 1
```
- choose `name` as a index column
```{python}
# 
# choose `name` as a index column
df.set_index('name', inplace=True)
df.head()
```
- select single index value
```{python}
#
df.loc[['A']]
```
- select a list of index values
```{python}
df.loc[['A', 'C']]
```

- select a list of index values and a list of ccolumn names
```{python}
#
df.loc[['A', 'C'],  ['salary', 'addr']]
```

### (2) Select based on condition

- filter by one condition
```{python}
#
df.loc[df.title == 'Mr']
```

- filter by two conditions
```{python}
#
df.loc[(df.salary >= 40) & (df.title == 'Mr')]
```
- filter null value
```{python}
#
# 
df.loc[df.salary.isna()]
```
- filter not null value
```{python}
#
# filter not null value
df.loc[~df.salary.isna()]
```

```{python}
#
df.loc[(~df.salary.isna()) & (~df.addr.isna())]
#
```

## Resource
- [pandas.ipynb](https://github.com/hatttruong/machine-learning-from-scratch/blob/c8fa48bf0807b2540eb7d81e779d54885c83d1f8/pandas.ipynb)